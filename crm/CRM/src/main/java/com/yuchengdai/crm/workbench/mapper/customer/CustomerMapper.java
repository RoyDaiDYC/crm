package com.yuchengdai.crm.workbench.mapper.customer;

import com.yuchengdai.crm.workbench.domain.Customer;

import java.util.List;
import java.util.Map;

public interface CustomerMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    int insert(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    int insertSelective(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    Customer selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    int updateByPrimaryKeySelective(Customer record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_customer
     *
     * @mbg.generated Sat Mar 28 11:30:22 CST 2017
     */
    int updateByPrimaryKey(Customer record);

    /**
     * 插入一个客户信息
     *
     * @param customer
     * @return
     */
    int insertCustomer(Customer customer);

    /**
     * 根据参数，进行分页查询
     *
     * @param map
     * @return
     */
    List<Customer> selectAllCustomerForDetailByCondition(Map<String, Object> map);

    /**
     * 通过条件获取查询出的客户总条数
     *
     * @param map
     * @return
     */
    int selectAllCountCustomer(Map<String, Object> map);

    /**
     * 通过id查询出客户信息
     *
     * @param id
     * @return
     */
    Customer selectCustomerById(String id);

    /**
     * 根据id更新客户信息
     *
     * @param customer
     * @return
     */
    int updateCustomer(Customer customer);

    /**
     * 根据id批量进行客户内容删除
     *
     * @param ids
     * @return
     */
    int deleteCustomerById(String[] ids);

    /**
     * 根据id使用联合查询获取详细的客户信息
     *
     * @param id
     * @return
     */
    Customer selectCustomerForDetailById(String id);

    /**
     * 通过客户名称模糊查询获取客户集合
     *
     * @param name
     * @return
     */
    List<Customer> selectCustomerByName(String name);

    /**
     * 通过客户名称准确查询客户信息
     *
     * @param name
     * @return
     */
    List<Customer> selectCustomerByNameAccurately(String name);
}