package com.yuchengdai.crm.workbench.mapper.clue;

import com.yuchengdai.crm.workbench.domain.ClueActivityRelation;

import java.util.List;
import java.util.Map;

public interface ClueActivityRelationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    int insert(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    int insertSelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    ClueActivityRelation selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    int updateByPrimaryKeySelective(ClueActivityRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_clue_activity_relation
     *
     * @mbg.generated Tue Mar 24 09:28:46 CST 2017
     */
    int updateByPrimaryKey(ClueActivityRelation record);

    /**
     * 批量插入多条线索活动关系内容
     *
     * @param clueActivityRelationList
     * @return
     */
    int insertClueActivityRelation(List<ClueActivityRelation> clueActivityRelationList);

    /**
     * 根据线索id获取所有对应关联的市场活动关系
     *
     * @param clueId
     * @return
     */
    List<ClueActivityRelation> selectClueActivityRelationByClueId(String clueId);

    /**
     * 通过clueId确定线索
     * 再通过activityId确定删除对应的市场活动
     *
     * @param map
     * @return
     */
    int deleteClueActivityRelationByClueIdActivityId(Map<String, Object> map);

    /**
     * 通过clueId定位相关的所有关联活动，统一删除
     *
     * @param clueId
     * @return
     */
    int deleteCLueActivityRelationByClueId(String clueId);

    /**
     * 根据线索id批量删除对应的线索市场活动关系内容
     *
     * @param clueIds
     * @return
     */
    int deleteClueActivityRelationByClueIdArray(String[] clueIds);
}